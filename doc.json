{
  "swagger": "2.0",
  "info": {
    "description": "A Social platform for the creative at heart",
    "version": "1.0.0",
    "title": "Authors Haven",
    "termsOfService": "http://swagger.io/terms/",
    "contact": {
      "email": "vidar.ah2019@gmail.com"
    },
    "license": {
      "name": "GNU General Public License",
      "url": "https://www.gnu.org/licenses/gpl-3.0.en.html"
    }
  },
  "host": "vidar-ah-backend-staging.herokuapp.com",
  "basePath": "/api/v1",
  "schemes": [
    "https",
    "http"
  ],
  "paths": {
    "/user": {
      "post": {
        "tags": [
          "Authentication"
        ],
        "summary": "User registration",
        "description": "A Social platform for the creative at heart",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "Profile details",
            "in": "body",
            "description": "To register user",
            "required": true,
            "schema": {
              "$ref": "#/definitions/user"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Signup successful"
          },
          "409": {
            "description": "User already exists"
          },
          "422": {
            "description": "Validation error"
          }
        }
      }
    },
    "/userprofile": {
      "get": {
        "tags": [
          "Profile"
        ],
        "summary": "View user profile",
        "description": "Get user's profile information",
        "consumes": [
          "application/x-www-form-urlencoded",
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "x-access-token",
            "in": "header",
            "description": "A token to verify the user",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Return's user's profile details"
          },
          "401": {
            "description": "Authentication error"
          }
        }
      },
      "patch": {
        "tags": [
          "Profile"
        ],
        "summary": "Update user's profile ",
        "description": "Update user's profile information",
        "consumes": [
          "application/x-www-form-urlencoded",
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "x-access-token",
            "in": "header",
            "description": "A token to verify the user",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "Request body",
            "description": "Update user profile",
            "required": true,
            "schema": {
              "$ref": "#/definitions/profile"
            }
          }
        ],
        "responses": {
          "205": {
            "description": "Returns updated profile"
          },
          "422": {
            "description": "Required fields not present"
          },
          "401": {
            "description": "Authentication error"
          }
        }
      }
    },
    "/resetpassword": {
      "post": {
        "tags": [
          "Reset password"
        ],
        "summary": "Send reset link to user email",
        "description": "Send reset link to user email",
        "consumes": [
          "application/x-www-form-urlencoded",
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "Request body",
            "description": "Reset user password",
            "required": true,
            "schema": {
              "$ref": "#/definitions/resetpassword"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Save password reset key in database and send link to email"
          },
          "404": {
            "description": "User not registered or verified."
          },
          "422": {
            "description": "Email is invalid"
          }
        }
      }
    },
    "/verifypasswordkey/{key}": {
      "get": {
        "tags": [
          "Reset password"
        ],
        "summary": "Verify user reset password key",
        "description": "Verify user reset password key",
        "consumes": [
          "application/x-www-form-urlencoded",
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "key",
            "description": "key sent with the link to the user email",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "You can now reset your password."
          },
          "410": {
            "description": "Your link has expired. Please try to reset password again."
          },
          "404": {
            "description": "Password reset token not found."
          }
        }
      }
    },
    "/changepassword": {
      "post": {
        "tags": [
          "Reset password"
        ],
        "summary": "Reset user password",
        "description": "Reset user password and delete password token",
        "consumes": [
          "application/x-www-form-urlencoded",
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "Request body",
            "description": "Reset user password",
            "required": true,
            "schema": {
              "$ref": "#/definitions/resetpassword3"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Password changed successfully."
          },
          "422": {
            "description": "Password must be at least 6 characters long."
          }
        }
      }
    }
  },
  "definitions": {
    "user": {
      "type": "object",
      "properties": {
        "username": {
          "type": "string",
          "format": "int64"
        },
        "email": {
          "type": "string",
          "format": "int64"
        },
        "password": {
          "type": "string",
          "format": "int64"
        },
        "name": {
          "type": "string",
          "format": "int64"
        }
      }
    },
    "profile": {
      "type": "object",
      "properties": {
        "firstname": {
          "type": "string"
        },
        "lastname": {
          "type": "string"
        },
        "bio": {
          "type": "string"
        }
      }
    },
    "resetpassword": {
      "type": "object",
      "properties": {
        "email": {
          "type": "string"
        }
      }
    },
    "changepassword": {
      "type": "object",
      "properties": {
        "password": {
          "type": "string"
        }
      }
    }
  },
  "externalDocs": {
    "description": "Find out more about Swagger",
    "url": "http://swagger.io"
  }
}
